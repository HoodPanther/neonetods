return(inStates)
}
)
names(taxaInStates) <- uTaxa$acceptedTaxonID
#generates columns of Presence/Absence
system.time(taxaInDomains <- foreach(i=1:nrow(uTaxa))%dopar%{
states <- taxaInStates[[i]]
inDomains <- NULL
for (j in domainIDs){
if (length(which(states%in%statesInDomains[[j]])) > 0){
inDomains <- c(inDomains, 'P')
} else {inDomains <- c(inDomains, 'A')}
}
return(inDomains)
})
# are these next 2 lines of code necessary? I(k8) commented them out for now
# z <- taxaInDomains
# taxaInDomains <- z
taxaInDomains <- data.frame(matrix(unlist(taxaInDomains), ncol=20, byrow=T))
names(taxaInDomains) <- domainIDs
taxaInDomains$acceptedTaxonID <- uTaxa$acceptedTaxonID
#see where we are so far
#print (head(taxaInDomains))
#moved to next chunk
#usda <- merge(usda, taxaInDomains, by = "acceptedTaxonID")
````
#next repeat for Native/Introduced/ETC
#then leave absences as A, but overwrite presences with nativeStatus
```{r replace Presence data with Native Status Codes}
## locales indicates the spatial resolutions at which usda reports nativity status
## KT I think we only need to deal with locales that are within NEON's realm
#locales <- c('L48', 'AK', 'HI', 'PR', 'VI','CAN','GL', 'SPM', 'NA')
locales <- c('L48', 'AK', 'HI', 'PR')
localesInDomains <- list(d01=c('L48'),
d02=c('L48'),
d03=c('L48'),
d04=c('PR'),##in 2014, all sites in D04 are in PR -
##no sites yet in the FL portion of the domain
d05=c('L48'),
d06=c('L48'),
d07=c('L48'),
d08=c('L48'),
d09=c('L48'),
d10=c('L48'),
d11=c('L48'),
d12=c('L48'),
d13=c('L48'),
d14=c('L48'),
d15=c('L48'),
d16=c('L48'),
d17=c('L48'),
d18=c('AK'),
d19=c('AK'),
d20=c('HI'))
# pull out acceptedTaxonIDs where nativity status data are provided by the usda
uTaxaNativity <- unique(subset(usda, str_length(usda$Native.Status) > 0,
select = c("acceptedTaxonID","Native.Status")))
#need to convert taxaInDomains to character from factors, so that the Ps can be
##updated and not cause an invalid factor level error
taxaInDomains <- data.frame(lapply(taxaInDomains, as.character),
stringsAsFactors=FALSE)
#then need to convert the uTaxaNatviity$acceptedTaxonID to character to all
##comparison with taxaInDomains$acceptedTaxonID
uTaxaNativity$acceptedTaxonID <- as.character(uTaxaNativity$acceptedTaxonID)
#could not get the parallel foreach function to work here, I think because
#"foreach differs from a for loop in that its return is a list of values,
#whereas a for loop has no value and uses side effects to convey its result."
#Here are the rules for defining Nativity Codes:
#For Domains 1-3 and 5-17 where P/A = 'P', and Native.Status = L48(x),
# replace 'P' with 'x' (That is, whatever is between the parentheses following 'L48')
# acceptable values for 'x' = N, N?, GP, GP?, I, I?, W, W?
# this function extracts the value from within a parentheses#
# gsub("[\\(\\)]", "", regmatches(usda$Native.Status, gregexpr("\\(.*?\\)", usda$Native.Status)))#
#For Domain 4 where P/A = 'P', if Native.Status = L48(x), and/or PR(y)
# replace 'P' with 'y'
# else replace 'P' with 'x'
#For Domains 18-19 where P/A = 'P', and Native.Status = AK(x)
# replace 'P' with 'x'
#For Domain 20 where P/A = 'P', and Native.Status = HI(x)
# replace 'P' with 'x'
system.time(
for (i in 1:nrow(uTaxaNativity)){
for (a in 1:nrow(taxaInDomains)){
#work with records in taxaInDomains for relevant taxon:
if (taxaInDomains$acceptedTaxonID[a] == uTaxaNativity$acceptedTaxonID[i]){
#extract native status code for each region (locale)
for (b in locales) {
if(max(grepl(b, uTaxaNativity$Native.Status[i]))){
k <- paste(b, '\\(.*?\\)', sep = ' ')
l <- gsub("[\\(\\)]", "",
regmatches(uTaxaNativity$Native.Status[i],
regexpr(k, uTaxaNativity$Native.Status[i])))
print (nativeStatus <- strsplit(l, " ")[[1]][2])
#replace 'P's in relevant region with correct native status code
for (j in 1:length(domainIDs)){
if (length(which(b%in%localesInDomains[[j]])) > 0){
if (taxaInDomains[a,j] == 'P'){
taxaInDomains[a,j] <- nativeStatus
}
}
}
}
}
}
}
}
)
usda <- merge(usda, taxaInDomains, by = "acceptedTaxonID")
```
#now need to address the fact that USDA does not provide native status data for
##all acceptedTaxonIDs. Assumptions implemented below: (1) if a rank below
##subspecies is assigned a status of native in a given locale, all records for
##that species will be assigned a status of native in that locale; (2) if a
##species is assigned a status of introduced in a given locale, records for
##taxa at a lower rank will be assigned a status of introduced in that locale.
#Also need to run similar algorithms for T&E species, and replace 'P's with
#native status codes where available for that species or with 'UNK' for
#unknown status, if needed
```{r assign FEDERAL status}
#start with federal status and P replacement
# For all taxonID where StatusCode = N,
#if 'Federal.T.E.Status' is non-null # !is.na #
#replace 'N' with 'Federal'
for (i in 1:nrow(usda)){
for (j in domainIDs){
a <- which(names(usda) == j)
if (usda[i,a] != 'A'){
if (nchar(as.character(usda$Federal.T.E.Status[i])) > 0){
usda[i,a] <- "FEDERAL"
} else if (usda[i,a] == 'P'){
temp <- subset(usda, ((usda$genus == usda$genus[i]) &
(usda$specificEpithet == usda$specificEpithet[i])))
nativeStatus <- unique(temp[,a][temp[,a]!="A"][temp[,a]!="P"])
if (length(which(!is.na(nativeStatus))) == 1) {
usda[i,a] <- nativeStatus[!is.na(nativeStatus)]
} else {
usda[i,a] <- "UNK"
}
}
}
}
}
```
# Fill State Statuses
```{r assign STATE to spp with status in states}
#create list of states which have a status for each species
system.time(
taxaStateStati <- foreach(i=1:nrow(usda))%dopar% {
stateStati <- NULL
for (j in states){
if(max(grepl(j, usda$State.T.E.Status[i]))){
stateStati <- c(stateStati, j)
}
}
return(stateStati)
}
)
names(taxaStateStati) <- usda$acceptedTaxonID
#if 'Federal.T.E.Status' is null AND 'State.T.E.Status' is non-null
#replace 'N' with 'State'
#else, do nothing
for (i in 1:nrow(usda)){
states <- taxaStateStati[[i]]
for (j in domainIDs){
a <- which(names(usda) == j)
if (length(which(states%in%statesInDomains[[j]])) > 0){
usda[i,a] <- "STATE"
}
}
}
```
# Fill in locale nativity
```{r populate floristic area nativity according to algorithm applied above for domain nativity}
system.time(
taxaInLocales <- foreach(i=1:nrow(uTaxaNativity))%dopar% {
inLocales <- NULL
for (j in locales){
if(max(grepl(j, uTaxaNativity$Native.Status[i]))){
inLocales <- c(inLocales, j)
}
}
return(inLocales)
})
names(taxaInLocales) <- uTaxaNativity$acceptedTaxonID
## this list is = to taxaInStates #
## No examples for AK #
#generates columns of Presence/Absence
localesList<-list('l48NativeStatusCode'=c('L48'),
'akNativeStatusCode'=c('AK'),
'hiNativeStatusCode'=c('HI'),
'prNativeStatusCode'=c('PR')
)
floristicArea<-list('L48', 'AK', 'HI', 'PR')
system.time(taxaInLocales2 <- foreach(i=1:nrow(uTaxaNativity))%dopar%{
floristicArea <- taxaInLocales[[i]]
inLocales <- NULL
for (j in localesList){
if (length(which(j %in% floristicArea)) > 0){
inLocales <- c(inLocales, 'P')
} else {inLocales <- c(inLocales, 'A')}
}
return(inLocales)
})
# floristArea and locales are lists of exactly the same thing, the arguments were circular if not
## written this way
names(taxaInLocales2) <- uTaxaNativity$acceptedTaxonID
#produces a list of P/A (only 'A') with columns (un-named) for each locale
taxaInLocales2 <- data.frame(matrix(unlist(taxaInLocales2), ncol=4, byrow=TRUE))
names(taxaInLocales2) <- locales
taxaInLocales2$acceptedTaxonID <- uTaxaNativity$acceptedTaxonID
taxaInLocales2 <- data.frame(lapply(taxaInLocales2, as.character),
stringsAsFactors=FALSE)
system.time(
for (i in 1:nrow(uTaxaNativity)){
for (a in 1:nrow(taxaInLocales2)){
#work with records in taxaInLocales2 for relevant taxon:
if (taxaInLocales2$acceptedTaxonID[a] == uTaxaNativity$acceptedTaxonID[i]){
#extract native status code for each region (locale)
for (b in locales) {
if(max(grepl(b, uTaxaNativity$Native.Status[i]))){
k <- paste(b, '\\(.*?\\)', sep = ' ')
l <- gsub("[\\(\\)]", "",
regmatches(uTaxaNativity$Native.Status[i],
regexpr(k, uTaxaNativity$Native.Status[i])))
print (nativeStatus <- strsplit(l, " ")[[1]][2])
#replace 'P's in relevant region with correct native status code
for (j in 1:length(locales)){
if (length(which(b%in%localesList[[j]])) > 0){
if (taxaInLocales2[a,j] == 'P'){
taxaInLocales2[a,j] <- nativeStatus
}
}
}
}
}
}
}
}
)
#KJ: I think this will work once I figure out why P/A = A for everything
#and now for the genus only taxa:
temp <- (uTaxa$acceptedTaxonID %in% uTaxaNativity$acceptedTaxonID)
uTaxaTemp <- uTaxa$acceptedTaxonID[temp == 'FALSE']
for (a in 1:length(uTaxaTemp)) {
i <- which(usda$acceptedTaxonID == uTaxaTemp[a])
l48codes <- as.character(usda[i,c(45:47,49:61)])
if (length(unique(l48codes[l48codes != 'A'])) > 1) {
taxaInLocales2[(140+a), 1] <- 'UNK'
} else if (length(unique(l48codes[l48codes != 'A'])) == 1) {
taxaInLocales2[(140+a), 1] <- unique(l48codes[l48codes != 'A'])
} else {taxaInLocales2[(140+a), 1] <- 'A'}
taxaInLocales2[(140+a),2] <- unique(as.character(usda[i,62:63]))
taxaInLocales2[(140+a),3] <- as.character(usda[i,64])
taxaInLocales2[(140+a),4] <- as.character(usda[i,48])
taxaInLocales2[(140+a),5] <- as.character(uTaxaTemp[a])
}
usda <- merge(usda, taxaInLocales2, by = "acceptedTaxonID", all = T)
## rename fields
```
```{r populate startUseDate / endUseDate}
usda$startUseDate<-'20120501'
usda$endUseDate<- ifelse(!usda$taxonID=='','20140909',NA)
```
# Fill in nulls in taxonID field with values from acceptedTaxonID
```{r populate null values of taxonID}
usda$taxonID<-as.character(usda$taxonID)
usda$taxonID[usda$taxonID==''|is.na(usda$taxonID)] <-as.character(usda$acceptedTaxonID[usda$taxonID==''|is.na(usda$taxonID)])
```
# Fill in nulls in higher level taxonomy fields (i.e., kingdom)
# with values from acceptedTaxonID
```{r populate kingdom field where null}
usda$kingdom<-as.character(usda$kingdom)
usda$kingdom[usda$kingdom==''|is.na(usda$kingdom)] <-as.character('Plantae')
```
#Add spp. and sp. codes
```{r add sp. codes to each level of genus and family}
#there are no individual records for family only in the database,
#these records will have to be generated. genus only do already exist.
#KJ: added column 'FamilySymbol' Can generate list of unique families from this
#and create new records family only ID
#generate records of unique families and populate sciName with sp.
families<-unique (usda[,c('family', 'Family.Symbol', 'order', 'phylum', 'class', 'kingdom')])
families<-families[families$family!='',]
families <- rename(families, c(Family.Symbol='acceptedTaxonID')) #This is what we want for PDA utility, correct? yep
families$taxonID <- families$acceptedTaxonID
families$taxonRank<- 'family'
families$scientificName<-paste(families$family,'sp.', sep=' ')
families$specificEpithet <- 'sp.'
usda<-merge(usda, families, by=c('acceptedTaxonID', 'taxonID', 'family', 'order', 'phylum', 'class','kingdom', 'taxonRank', 'scientificName', 'specificEpithet'), all=TRUE)
#identify records of unique genera and populate sciName with sp.
#assign locality data to these spuh records
#indexing based on the fact that the locality fields are the last 24 fields
#in the usda table
#logic: if >1 taxa in a family in a given domain or locale is present,
#then the family sp. gets assigned UNK for that domain or locale
#if one or fewer taxon in a family are indicated as present in a domain or locale, the
#family is presumed absent as well
for (a in (ncol(usda)-23):ncol(usda)) {
for (b in families$family) {
temp <- subset(usda, usda$family == b)
codes <- (temp[,a])
subcodes <- subset(codes, (codes != 'A') & !is.na(codes))
i <- which(usda$family == b & usda$taxonRank == 'family')
if (length(subcodes) > 1) {
if (length(unique(subcodes)) == 1) {
usda[i,a] <- unique(subcodes)
} else usda[i,a] <- 'UNK'
} else usda[i,a] <- 'A'
}
}
##below is code for testing that all genera have a genus entry - only one family
#tested, but test passed - so assuming USDA provides all necessary records
ugenera <- unique(usda$genus[(usda$taxonID)==''])
# temp <- subset(usda, usda$taxonRank == 'genus')
# generates 'sp.'s for genus-level records
usda$specificEpithet[usda$taxonRank == 'genus'] <- 'sp.'
#re-assign value of sciName for genus-level taxa to remove authority
usda$scientificName <- as.character(usda$scientificName)
for (i in 1:nrow(usda)) {
if (usda$taxonRank[i] == 'genus') {
usda$scientificName[i] <- paste(usda$genus[i], 'sp.', sep = ' ')
}
}
```
```{r add spp. codes to each level of genus and family}
#duplicate sp. records but change to spp. and add 'SPP' to taxonIDs for new records
sppList<-usda[which(usda$specificEpithet=='sp.'),]
sppList$acceptedTaxonID <- paste(sppList$acceptedTaxonID,'SPP',sep='')
sppList$scientificName <- paste(sppList$genus, 'spp.', sep = ' ')
sppList$specificEpithet <- 'spp.'
usda<-rbind(usda,sppList)
```
# Assign source fields and extra regional columns
```{r cut columns and assign values to source fields}
# cut extra columns
usdaCut<-names(usda) %in% c('Hybrid.Genus.Indicator', 'Hybrid.Species.Indicator',
'Subspecies.Prefix', 'Hybrid.Subspecies.Indicator','Subspecies',
'Variety.Prefix', 'Hybrid.Variety.Indicator', 'Variety',
'Subvariety.Prefix', 'Subvariety','Forma.Prefix','Forma',
'Genera.Binomial.Author','Trinomial.Author','Quadranomial.Author',
'Questionable.Taxon.Indicator','Parents', 'State.and.Province',
'Genus.1', 'Duration', 'Growth.Habit','Native.Status',
'Federal.Noxious.Status', 'State.Noxious.Status',
'Invasive','Federal.T.E.Status', 'State.T.E.Status', 'ITIS.TSN',
'National.Wetland.Indicator.Status','Family.Symbol','scientificNameAuthorship.x')
usda2<-usda[!usdaCut]
usda2 <- rename(usda2, c(d01='d01NativeStatusCode',
d02='d02NativeStatusCode',
d03='d03NativeStatusCode',
d04='d04NativeStatusCode',
d05='d05NativeStatusCode',
d06='d06NativeStatusCode',
d07='d07NativeStatusCode',
d08='d08NativeStatusCode',
d09='d09NativeStatusCode',
d10='d10NativeStatusCode',
d11='d11NativeStatusCode',
d12='d12NativeStatusCode',
d13='d13NativeStatusCode',
d14='d14NativeStatusCode',
d15='d15NativeStatusCode',
d16='d16NativeStatusCode',
d17='d17NativeStatusCode',
d18='d18NativeStatusCode',
d19='d19NativeStatusCode',
d20='d20NativeStatusCode',
L48='l48NativeStatusCode',
AK='akNativeStatusCode',
HI='hiNativeStatusCode',
PR='prNativeStatusCode',
scientificNameAuthorship.y='scientificNameAuthorship'))
cat(names(usda2))
#add placeholders for new columns
usda2$speciesGroup<-NA
usda2$tribe<-NA
usda2$subgenus<-NA
usda2$speciesGroup<-NA
usda2$subfamily<-NA
# KJ adding new columns 20140825
usda2$nameAccordingTo<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$nameAccordingToID<-NA  #is this the reference (key) the techs are using in the field?#
## read in lookup table of phenology species
## adjust to 'mypathtorepo'... wasn't working for me so I cheated
phenSpecies<-read.csv(paste(mypathtorepo, 'lookupTablesShared/phenologySpeciesList.csv', sep = '/'))
phenSciName<-names(phenSpecies) %in% c('scientificName')
phenSpecies<-phenSpecies[!phenSciName]
#add taxonProtocolCategory
# usda2$taxonProtocolCategory<-NA  #resolved
#merge usda2 and phenSpecies to populate taxonProtocolCategory
#usda2$taxonProtocolCategory<-phenSpecies$growthForm #...for a given taxonID
usda2<- merge(usda2,phenSpecies, by='acceptedTaxonID', all = TRUE)
##TODO: populate: l48NativeStatusCode based on unique status values for set of
# domains {1,2,3,5-17}, akNativeStatusCode based on unique status values for
#set of domains {18, 19}, hiNativeStatusCode based on d20NSC,
#prNativeStatusCode based on d04NSC
# KJ did this above using P/A routine from domain specific algorithm
# usda2$l48NativeStatusCode<-NA   # Resolved (mostly)
usda2$l48NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$l48LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
# usda2$akNativeStatusCode<-NA   # Resolved (mostly)
usda2$akNativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$akLocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
# usda2$hiNativeStatusCode<-NA    # Resolved (mostly)
usda2$hiNativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$hiLocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
# usda2$prNativeStatusCode<-NA   # Resolved (mostly)
usda2$prNativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$prLocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d01NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d01LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d02NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d02LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d03NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d03LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d04NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d04LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d05NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d05LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d06NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d06LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d07NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d07LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d08NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d08LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d09NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d09LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d10NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d10LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d11NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d11LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d12NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d12LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d13NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d13LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d14NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d14LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d15NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d15LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d16NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d16LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d17NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d17LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d18NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d18LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d19NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d19LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d20NativeStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
usda2$d20LocalityStatusSource<- 'USDA, NRCS. 2014. The PLANTS Database (http://plants.usda.gov, 25 August 2014). National Plant Data Team, Greensboro, NC 27401-4901 USA.'
```
# Reorganize fields
```{r reorganize fields to match NEON taxon template}
reorder<- c('taxonID', 'acceptedTaxonID', 'startUseDate', 'endUseDate',
'kingdom', 'phylum',
'class', 'order', 'family', 'subfamily', 'tribe', 'genus',
'subgenus', 'speciesGroup',
'specificEpithet', 'infraspecificEpithet', 'scientificName',
'scientificNameAuthorship', 'taxonRank', 'vernacularName',
'nameAccordingTo', 'nameAccordingToID', 'taxonProtocolCategory',
'l48NativeStatusCode', 'l48NativeStatusSource', 'l48LocalityStatusSource',
'akNativeStatusCode', 'akNativeStatusSource','akLocalityStatusSource',
'hiNativeStatusCode','hiNativeStatusSource','hiLocalityStatusSource',
'prNativeStatusCode', 'prNativeStatusSource','prLocalityStatusSource',
'd01NativeStatusCode','d01NativeStatusSource','d01LocalityStatusSource',
'd02NativeStatusCode','d02NativeStatusSource','d02LocalityStatusSource',
'd03NativeStatusCode','d03NativeStatusSource','d03LocalityStatusSource',
'd04NativeStatusCode','d04NativeStatusSource','d04LocalityStatusSource',
'd05NativeStatusCode','d05NativeStatusSource','d05LocalityStatusSource',
'd06NativeStatusCode','d06NativeStatusSource','d06LocalityStatusSource',
'd07NativeStatusCode','d07NativeStatusSource','d07LocalityStatusSource',
'd08NativeStatusCode','d08NativeStatusSource','d08LocalityStatusSource',
'd09NativeStatusCode','d09NativeStatusSource','d09LocalityStatusSource',
'd10NativeStatusCode','d10NativeStatusSource','d10LocalityStatusSource',
'd11NativeStatusCode','d11NativeStatusSource','d11LocalityStatusSource',
'd12NativeStatusCode','d12NativeStatusSource','d12LocalityStatusSource',
'd13NativeStatusCode','d13NativeStatusSource','d13LocalityStatusSource',
'd14NativeStatusCode','d14NativeStatusSource','d14LocalityStatusSource',
'd15NativeStatusCode','d15NativeStatusSource','d15LocalityStatusSource',
'd16NativeStatusCode','d16NativeStatusSource','d16LocalityStatusSource',
'd17NativeStatusCode','d17NativeStatusSource','d17LocalityStatusSource',
'd18NativeStatusCode','d18NativeStatusSource','d18LocalityStatusSource',
'd19NativeStatusCode','d19NativeStatusSource','d19LocalityStatusSource',
'd20NativeStatusCode','d20NativeStatusSource','d20LocalityStatusSource')
```
# Replace '?' with 'Q' in all native status codes
```{r replace question marks}
usda2[usda2=='?']<- 'Q'
```
# add 'other' and 'unknown' record
```{r add other and 2PLANT record}
other<-read.csv(paste(mypathtorepo,'lookuptablesShared/plant_other_record.csv', sep='/'))
#usda2 <- data.frame(usda2, row.names = NULL)
usda2<-rbind(usda2, other)
```
#For the full list
```{r write final csv}
usda2 <- usda2[, reorder]
write.csv(usda2[, reorder], na=' ',paste(mypathtorepo,
'lookupTablesShared/USDA_test.csv',
sep='/'), quote = T, row.names=FALSE)
#removing na's did not fix the problem for NA's imbeded in infraspecificEpithets #
```
View(taxaInDomains)
setwd("~/Documents/GitHub/neonetods/neonetods/data")
datafile <- read.csv('herps_taxonomy.csv', header = T, stringsAsFactors = FALSE, strip.white = TRUE, na.strings = '')
View(datafile)
View(datafile)
write.csv(datafile, 'herpsOriginalCodesSpLists.csv')
rm(list=ls())
mypathtorepo <- 'C:/Users/nrobinson/Desktop/MyDocuments/NEON_Git/organismalIPT'
setwd(mypathtorepo)
pointData <- read.csv('lookupTablesShared/pointSpatialData.csv', header = T, stringsAsFactors = FALSE, strip.white = TRUE, na.strings = '')
pointData <- read.csv('lookupTablesShared/pointSpatialData.csv', header = T, stringsAsFactors = FALSE, strip.white = TRUE, na.strings = '')
